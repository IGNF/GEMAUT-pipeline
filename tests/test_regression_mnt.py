#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Tests de r√©gression pour le MNT final
Compare le MNT calcul√© avec MNT_OUT_REFERENCE.tif
Garantit que la qualit√© du MNT ne se d√©grade pas
"""

import unittest
import numpy as np
import rasterio
import tempfile
import os
import shutil
from rasterio.transform import from_origin
from loguru import logger

# Import des modules √† tester
import sys
sys.path.append('..')
from script_gemaut import GEMAUTPipeline
from gemaut_config import GEMAUTConfig


class TestMNTRegression(unittest.TestCase):
    """Tests de r√©gression pour le MNT final"""
    
    @classmethod
    def setUpClass(cls):
        """Ex√©cution unique du pipeline GEMAUT pour tous les tests"""
        # Configuration commune
        cls.temp_dir = tempfile.mkdtemp()
        cls.mns_input = os.path.join(os.path.dirname(__file__), "MNS_IN.tif")
        cls.mnt_reference = os.path.join(os.path.dirname(__file__), "MNT_OUT_REFERENCE.tif")
        cls.mnt_output = os.path.join(cls.temp_dir, "MNT_OUT_TEST.tif")
        cls.work_dir = os.path.join(cls.temp_dir, "work")
        
        # V√©rifier que les fichiers de r√©f√©rence existent
        if not os.path.exists(cls.mns_input):
            raise FileNotFoundError(f"Fichier MNS de r√©f√©rence manquant: {cls.mns_input}")
        if not os.path.exists(cls.mnt_reference):
            raise FileNotFoundError(f"Fichier MNT de r√©f√©rence manquant: {cls.mnt_reference}")
        
        # Cr√©er le r√©pertoire de travail
        os.makedirs(cls.work_dir, exist_ok=True)
        
        # Calculer le nombre de CPU √† utiliser (2/3 des CPU disponibles)
        import multiprocessing
        available_cpus = multiprocessing.cpu_count()
        test_cpus = max(1, int(available_cpus * 2 / 3))
        
        # Configuration pour le pipeline
        config = GEMAUTConfig(
            mns_input=cls.mns_input,
            mnt_output=cls.mnt_output,
            resolution=4.0,
            cpu_count=test_cpus,
            work_dir=cls.work_dir,
            sigma=0.5,
            regul=0.01,
            tile_size=200,
            pad_size=80,
            clean_temp=False,
            verbose=False  # Pas de logs console
        )
        
        # Ex√©cuter le pipeline une seule fois pour tous les tests
        import time
        logger.info("üöÄ Ex√©cution unique du pipeline GEMAUT pour tous les tests")
        start_time = time.time()
        pipeline = GEMAUTPipeline(config)
        pipeline.run()
        end_time = time.time()
        
        execution_time = end_time - start_time
        logger.info(f"‚è±Ô∏è  Temps d'ex√©cution du pipeline: {execution_time:.2f} secondes")
        
        # V√©rifier que le fichier de sortie a √©t√© cr√©√©
        if not os.path.exists(cls.mnt_output):
            raise FileNotFoundError(f"Le fichier MNT de sortie n'a pas √©t√© cr√©√©: {cls.mnt_output}")
        
        logger.info("‚úÖ Pipeline GEMAUT ex√©cut√© avec succ√®s")
    
    def setUp(self):
        """Pr√©paration individuelle pour chaque test (plus n√©cessaire)"""
        pass
    
    @classmethod
    def tearDownClass(cls):
        """Nettoyage final apr√®s tous les tests (sauf le MNT de sortie)"""
        import time
        
        # Garder le MNT de sortie pour analyse
        if hasattr(cls, 'mnt_output') and os.path.exists(cls.mnt_output):
            # Copier le MNT dans le r√©pertoire tests pour analyse
            output_dir = os.path.dirname(__file__)
            backup_name = f"MNT_OUT_TEST_{int(time.time())}.tif"
            backup_path = os.path.join(output_dir, backup_name)
            shutil.copy2(cls.mnt_output, backup_path)
            logger.info(f"üìÅ MNT de test sauvegard√©: {backup_path}")
        
        # Supprimer le reste des fichiers temporaires
        if os.path.exists(cls.temp_dir):
            shutil.rmtree(cls.temp_dir)
    
    def tearDown(self):
        """Nettoyage individuel (plus n√©cessaire)"""
        pass
    
    def load_raster_data(self, file_path):
        """Charge les donn√©es d'un raster"""
        with rasterio.open(file_path) as src:
            data = src.read(1)
            profile = src.profile
            transform = src.transform
            crs = src.crs
            nodata = src.nodata
        return data, profile, transform, crs, nodata
    
    def compare_rasters(self, raster1_path, raster2_path, tolerance=1e-2):
        """Compare deux rasters et retourne les diff√©rences"""
        data1, profile1, transform1, crs1, nodata1 = self.load_raster_data(raster1_path)
        data2, profile2, transform2, crs2, nodata2 = self.load_raster_data(raster2_path)
        
        # V√©rifier les m√©tadonn√©es
        metadata_match = {
            'dimensions': data1.shape == data2.shape,
            'crs': str(crs1) == str(crs2),
            'transform': transform1 == transform2,
            'nodata': nodata1 == nodata2,
            'dtype': profile1['dtype'] == profile2['dtype']
        }
        
        # Masquer les valeurs no_data pour la comparaison
        mask1 = data1 != nodata1
        mask2 = data2 != nodata2
        common_mask = mask1 & mask2
        
        # Calculer les diff√©rences
        if np.any(common_mask):
            diff = np.abs(data1[common_mask] - data2[common_mask])
            max_diff = np.max(diff)
            mean_diff = np.mean(diff)
            std_diff = np.std(diff)
            pixels_different = np.sum(diff > tolerance)
            total_pixels = np.sum(common_mask)
            percent_different = (pixels_different / total_pixels) * 100
        else:
            max_diff = mean_diff = std_diff = 0
            pixels_different = total_pixels = percent_different = 0
        
        return {
            'metadata_match': metadata_match,
            'max_diff': max_diff,
            'mean_diff': mean_diff,
            'std_diff': std_diff,
            'pixels_different': pixels_different,
            'total_pixels': total_pixels,
            'percent_different': percent_different,
            'tolerance': tolerance
        }
    
    def test_mnt_quality_regression(self):
        """Test principal de r√©gression - MNT calcul√© vs r√©f√©rence"""
        logger.info("üß™ Test de r√©gression qualit√© MNT")
        
        # Comparer avec la r√©f√©rence
        comparison = self.compare_rasters(self.mnt_output, self.mnt_reference)
        
        # Tests de r√©gression
        logger.info(f"üìä R√©sultats de la comparaison:")
        logger.info(f"   - Diff√©rence max: {comparison['max_diff']:.6f}")
        logger.info(f"   - Diff√©rence moyenne: {comparison['mean_diff']:.6f}")
        logger.info(f"   - Pixels diff√©rents: {comparison['pixels_different']}/{comparison['total_pixels']} ({comparison['percent_different']:.2f}%)")
        
        # Assertions de qualit√©
        self.assertTrue(comparison['metadata_match']['dimensions'], 
                       "Les dimensions doivent √™tre identiques")
        self.assertTrue(comparison['metadata_match']['crs'], 
                       "Le syst√®me de coordonn√©es doit √™tre identique")
        self.assertTrue(comparison['metadata_match']['transform'], 
                       "La transformation g√©om√©trique doit √™tre identique")
        
        # Tol√©rance r√©aliste pour les diff√©rences num√©riques (pr√©cision centim√©trique)
        self.assertLess(comparison['max_diff'], 0.1, 
                       f"La diff√©rence maximale ({comparison['max_diff']:.6f}) doit √™tre < 0.1 m (10 cm)")
        self.assertLess(comparison['mean_diff'], 0.01, 
                       f"La diff√©rence moyenne ({comparison['mean_diff']:.6f}) doit √™tre < 0.01 m (1 cm)")
        
        # Pourcentage de pixels diff√©rents - tol√©rance r√©aliste
        if comparison['percent_different'] > 5.0:
            logger.warning(f"‚ö†Ô∏è  Attention: {comparison['percent_different']:.2f}% de pixels diff√©rents")
            logger.warning("   Avec une tol√©rance de 1 cm, ce pourcentage devrait √™tre < 5%")
            logger.warning("   V√©rifiez les param√®tres et versions des logiciels")
        
        # Test du pourcentage de pixels diff√©rents avec tol√©rance r√©aliste
        self.assertLess(comparison['percent_different'], 5.0, 
                       f"Le pourcentage de pixels diff√©rents ({comparison['percent_different']:.2f}%) doit √™tre < 5% (tol√©rance 1 cm)")
        
        logger.info("‚úÖ Test de r√©gression MNT r√©ussi")
    
    def test_mnt_performance(self):
        """Test de performance du pipeline (int√©gr√© dans les tests de r√©gression)"""
        logger.info("üß™ Test de performance du pipeline")
        
        # V√©rifier que le fichier existe et a une taille raisonnable
        self.assertTrue(os.path.exists(self.mnt_output), 
                       "Le fichier MNT de sortie doit exister")
        
        file_size = os.path.getsize(self.mnt_output)
        logger.info(f"üìÅ Taille du fichier MNT: {file_size / 1024 / 1024:.2f} MB")
        
        # V√©rifier que le fichier a une taille raisonnable (> 10 KB)
        self.assertGreater(file_size, 10 * 1024, 
                          f"Le fichier MNT doit faire plus de 10 KB (actuel: {file_size / 1024:.2f} KB)")
        
        logger.info("‚úÖ Test de performance r√©ussi")
    
    def test_mnt_metadata_consistency(self):
        """Test de la coh√©rence des m√©tadonn√©es du MNT"""
        logger.info("üß™ Test de coh√©rence des m√©tadonn√©es")
        
        # Charger les m√©tadonn√©es de r√©f√©rence
        with rasterio.open(self.mnt_reference) as src:
            ref_profile = src.profile
            ref_transform = src.transform
            ref_crs = src.crs
            ref_nodata = src.nodata
        
        # V√©rifier les m√©tadonn√©es du MNT calcul√©
        with rasterio.open(self.mnt_output) as src:
            test_profile = src.profile
            test_transform = src.transform
            test_crs = src.crs
            test_nodata = src.nodata
        
        # Comparaisons
        self.assertEqual(test_profile['dtype'], ref_profile['dtype'], 
                        "Le type de donn√©es doit √™tre identique")
        self.assertEqual(test_profile['count'], ref_profile['count'], 
                        "Le nombre de bandes doit √™tre identique")
        self.assertEqual(str(test_crs), str(ref_crs), 
                        "Le syst√®me de coordonn√©es doit √™tre identique")
        self.assertEqual(test_nodata, ref_nodata, 
                        "La valeur no_data doit √™tre identique")
        
        logger.info("‚úÖ Test de coh√©rence des m√©tadonn√©es r√©ussi")
    
    def test_mnt_spatial_extent(self):
        """Test de l'√©tendue spatiale du MNT"""
        logger.info("üß™ Test de l'√©tendue spatiale")
        
        # Charger les donn√©es de r√©f√©rence
        ref_data, ref_profile, ref_transform, ref_crs, ref_nodata = self.load_raster_data(self.mnt_reference)
        
        # Charger les donn√©es calcul√©es
        test_data, test_profile, test_transform, test_crs, test_nodata = self.load_raster_data(self.mnt_output)
        
        # V√©rifier les dimensions
        self.assertEqual(test_data.shape, ref_data.shape, 
                        "Les dimensions doivent √™tre identiques")
        
        # V√©rifier la transformation g√©om√©trique
        self.assertEqual(test_transform, ref_transform, 
                        "La transformation g√©om√©trique doit √™tre identique")
        
        # V√©rifier que les donn√©es ne sont pas vides
        ref_valid = ref_data != ref_nodata
        test_valid = test_data != test_nodata
        
        self.assertGreater(np.sum(ref_valid), 0, 
                          "La r√©f√©rence doit contenir des donn√©es valides")
        self.assertGreater(np.sum(test_valid), 0, 
                          "Le MNT calcul√© doit contenir des donn√©es valides")
        
        logger.info("‚úÖ Test de l'√©tendue spatiale r√©ussi")
    
    def test_mnt_statistical_consistency(self):
        """Test de la coh√©rence statistique du MNT"""
        logger.info("üß™ Test de coh√©rence statistique")
        
        # Charger les donn√©es de r√©f√©rence
        ref_data, _, _, _, ref_nodata = self.load_raster_data(self.mnt_reference)
        ref_valid = ref_data != ref_nodata
        ref_stats = {
            'min': np.min(ref_data[ref_valid]),
            'max': np.max(ref_data[ref_valid]),
            'mean': np.mean(ref_data[ref_valid]),
            'std': np.std(ref_data[ref_valid])
        }
        
        # Charger les donn√©es calcul√©es
        test_data, _, _, _, test_nodata = self.load_raster_data(self.mnt_output)
        test_valid = test_data != test_nodata
        test_stats = {
            'min': np.min(test_data[test_valid]),
            'max': np.max(test_data[test_valid]),
            'mean': np.mean(test_data[test_valid]),
            'std': np.std(test_data[test_valid])
        }
        
        # Comparer les statistiques (tol√©rance stricte de 1% pour calcul exact)
        tolerance = 0.01
        for stat in ['min', 'max', 'mean', 'std']:
            ref_val = ref_stats[stat]
            test_val = test_stats[stat]
            diff_percent = abs(test_val - ref_val) / abs(ref_val) * 100
            
            logger.info(f"   {stat}: r√©f√©rence={ref_val:.3f}, test={test_val:.3f}, diff={diff_percent:.2f}%")
            
            self.assertLess(diff_percent, 1.0, 
                           f"La diff√©rence pour {stat} ({diff_percent:.2f}%) doit √™tre < 1% (calcul exact)")
        
        logger.info("‚úÖ Test de coh√©rence statistique r√©ussi")





if __name__ == '__main__':
    print("üß™ Tests de r√©gression MNT GEMAUT")
    print("=" * 50)
    unittest.main(verbosity=2) 