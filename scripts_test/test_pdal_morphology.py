#!/usr/bin/env python3
"""
Script de test des op√©rations morphologiques PDAL
Teste les fonctions qui remplaceront SAGA ta_morphometry
"""

import sys
import os

def test_pdal_slope():
    """Test du calcul de pente avec PDAL"""
    try:
        import pdal
        
        print("üìä Test calcul de pente PDAL...")
        
        # Pipeline simple pour la pente
        pipeline_str = """
        {
            "pipeline": [
                {"type": "readers.raster", "filename": "data/MNS_IN.tif"},
                {"type": "filters.morphology", "operation": "slope"},
                {"type": "writers.raster", "filename": "output/pdal_results/slope_pdal.tif"}
            ]
        }
        """
        
        pipeline = pdal.Pipeline(pipeline_str)
        print("‚úÖ Pipeline pente PDAL cr√©√©")
        
        # Cr√©er le r√©pertoire de sortie
        os.makedirs("output/pdal_results", exist_ok=True)
        
        # Ex√©cuter le pipeline
        result = pipeline.execute()
        print(f"‚úÖ Pente calcul√©e avec PDAL")
        print(f"   R√©sultat: {result.arrays[0].shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur calcul pente PDAL: {e}")
        return False

def main():
    """Fonction principale"""
    print("üß™ TESTS DES OP√âRATIONS MORPHOLOGIQUES PDAL")
    print("=" * 50)
    
    # V√©rifier que PDAL est install√©
    try:
        import pdal
    except ImportError:
        print("‚ùå PDAL non install√©. Installez d'abord avec:")
        print("   conda install -c conda-forge pdal pdal-python")
        sys.exit(1)
    
    # Test de la pente
    if test_pdal_slope():
        print("\nüéâ Test de pente PDAL r√©ussi !")
    else:
        print("\n‚ö†Ô∏è  Test de pente PDAL √©chou√©")

if __name__ == "__main__":
    main() 